
// Clear all relationships
match (n)-[r]-()
delete r

//clear all nodes
match (n)
delete n

//filter items that are not related to node with CSERV as classification ID
match (ex) where ex.CLASSIFICATIONID = 'CSERV' 
with collect(ex) as exn match (n) 
where  (not n.CLASSIFICATIONID = 'CSERV') and 
    ALL(e in exn where not shortestPath( (n)-[*]-(e) ) is not null) 
return n



PUT http://planzu.sb01.stations.graphenedb.com:24789/db/data/index/auto/node/status HTTP/1.1
Accept: application/json; charset=UTF-8
Content-Type: application/json

select UserProfile.UserId, 
       UserProfile.UserName, 
	   webpages_OAuthMembership.Provider 
from userProfile
right outer join  webpages_OAuthMembership
on UserProfile.UserId = webpages_OauthMembership
order by UserProfile.UserId

POST http://planzu.sb01.stations.graphenedb.com:24789/db/data/index/auto/node/properties
Accept: application/json; charset=UTF-8
Content-Type: application/json

//Count all nodes
START n=node(*)
RETURN count(n)

//return all nodes
START n=node(*)
RETURN n


MATCH principal-[r]->()
WHERE principal.Id="b305df8b-f672-4aa0-c6cb-61b2900ab3d" 
 return p

 match principal-[r:KNOWS]->contactPerson<-[s:IS_DELEGATED_TO]-workunit
 delete r, s, contactPerson

 //Get All Users
START principal=node(*)
WHERE has(principal.UserName) 
RETURN principal.UserName, principal

complex fulfilment
START principal=node(44268)
MATCH principal-[:OWNS]->workunit-[:IS_VISIBLE_AT]->context,
principal-[:OWNS]->workunit-[?:FULFILLS]->fulfillmentworkunit
WHERE has(context.ContextName)
RETURN principal,context, workunit,fulfillmentworkunit


complex dependents
START principal=node(44268)
MATCH principal-[:OWNS]->workunit-[:IS_VISIBLE_AT]->context,
principal-[:OWNS]->workunit<-[?:FULFILLS]->dependentUnit
WHERE has(context.ContextName)
RETURN principal,context, workunit,dependentUnit


WorkSetCount
START principal=node(*)
MATCH principal-[r]->a
WHERE has(a.WorkDescription)
RETURN principal,count(a) As WorkSetCount

START principal=node(11790)
MATCH principal-[:OWNS]->workunit,
 principal-[:IS_LOCATED_AT]->context,
 principal-[:IS_FOCUSED_ON]->perspective
RETURN principal,context

//list all dependency relationships returns two column
// if any items in column A are not in column B then that item is not a dependency of any other node
START principal=node(*)
MATCH principal-[:OWNS]->workUnit-[r:FULFILLS]->w
WHERE has(principal.UserName) and principal.UserName="startup"
RETURN workUnit.WorkDescription, w.WorkDescription



START n=node(*)
RETURN n
// empty work descriptions that are connected
START principal=node(*)
MATCH principal-[r:OWNS]->workUnit
WHERE has(workUnit.WorkDescription) 
return  r, workUnit

// empty work descriptions that are connected
START principal=node(*)
MATCH principal-[r:OWNS]->workUnit-[s:IS_VISIBLE_AT]-a
WHERE has(workUnit.WorkDescription) and workUnit.WorkDescription=""
return  r, workUnit,s,a
START principal=node(*)
MATCH principal-[r:OWNS]->workunit
display  principal, workunit
// empty work descriptions that are connected
START principal=node(*)
MATCH principal-[r:IS_FOCUSED_ON]->perspective-[s:IS_THOUGHT_ABOUT_AT]-a
delete  r, s, perspective


MATCH (p:Principal), (c:Context)
WHERE p.Id="" AND c.Id = ""
CREATE (p)-[r:IS_LOCATED_AT]->(c)

//Get All Users
START principal=node(*)
WHERE has(principal.UserName) 
RETURN principal.UserName, principal
abee1cee-0d6b-4872-87b3-2fdf6c097df9



match (p:Principal), (c:Context)
WHERE p.Id = "9fa99287-1d7f-4b44-81d0-eb48ced25c50" AND c.Id = "ed84bf78-775f-40b4-8c82-83e930efee3b"
CREATE (p)-[r:IS_LOCATED_AT]->(c)

MATCH principal-[r]->c
WHERE(principal.UserName= "fiver")
return principal,  r, c

MATCH principal-[r]->x
WHERE principal.Id="dbb8098e-4a45-4e76-a01a-f14ed6bcc76e"
return  r,  x 

//Get specific user
START principal=node(*)
WHERE has(principal.UserName) and principal.UserName="testaccount"
RETURN principal.UserName

// Get dependency pairs for current user
START principal=node(*)
MATCH principal-[:OWNS]->workUnit
WHERE has(principal.UserName) and principal.UserName="testaccount"
RETURN principal.UserName,   workUnit.WorkDescription

// Get dependency pairs for current user
START principal=node(*)
MATCH principal-[:OWNS]->workUnit-[IS_DEPENDENT_ON]->depWorkUnit
WHERE has(principal.UserName) and principal.UserName="testaccount"
RETURN principal.UserName,   workUnit.WorkDescription


//get specific workset
START principal=node(*)
MATCH 
principal-[:OWNS]->workunit-[:IS_VISIBLE_AT]->context,  
principal-[:OWNS]->workunit-[:IS_THOUGHT_ABOUT_AT]->perspective, 
workunit-[r?:IS_SCHEDULED_ON]->calendarEvent,
workunit-[s?:IS_DELEGATED_TO]->contactPerson
WHERE 
	has(context.ContextName) 
	and has(perspective.PerspectiveName) 
RETURN 
	workunit AS WorkUnitNode, 
	context AS ContextNode, 
	perspective AS PerspectiveNode,
	calendarEvent As CalendarEventNode,
    contactPerson As ContactPersonNode

// get all user WorkDescription counts
START principal=node(*)
MATCH principal-[r]->workUnit
WHERE has(principal.UserName) AND has(workUnit.WorkDescription) 
RETURN principal.UserName, count(workUnit)

// get all user context counts
START principal=node(44268)
MATCH principal-[r]->context
WHERE has(principal.UserName) AND has(context.ContextName)
RETURN principal.UserName, count(context)

// get all user perspective counts
START principal=node(*)
MATCH principal-[r]->perspective
WHERE has(principal.UserName) AND has(perspective.PerspectiveName)
RETURN principal.UserName, perspective.PerspectiveName

// get all user perspective counts
START principal=node(*)
MATCH principal-[r]->calendarEvent
WHERE has(principal.UserName) AND has(calendarEvent.start)
RETURN principal.UserName, count(calendarEvent)

// get all user relationship counts
START principal=node(*)
MATCH principal-[r]
WHERE has(principal.UserName)
RETURN principal.UserName, count(r)

//find all nodes without relationships
START source=node(*)
optional MATCH source-[r]-target
WHERE r is null and not has(source.UserName)
RETURN source
START a=node(*) 
MATCH (a)-[r]-(b)
WHERE r is null 
RETURN r
//find all users without items
START source=node(*)
OPTIONAL MATCH source-[r]-target
WHERE r is null and not has(source.UserName)
return source

START principal=node(38)  
MATCH principal-[:OWNS]->workunit-[:IS_VISIBLE_AT]->context,  
principal-[:OWNS]->workunit-[:IS_THOUGHT_ABOUT_AT]->perspective  
 
WHERE has(context.ContextName) and has(perspective.PerspectiveName)  
RETURN workunit , 
 context AS ContextNode, 
 perspective AS PerspectiveNode

//Count all relationships like this
START principal=node(*)
MATCH principal-[r]->a-[s]->b
RETURN Count(*)

Returns project parents
start principal=node(9399) 
MATCH principal-[:OWNS]->parent-[r:DEPENDS_ON*2]->childone 
where r is not null return parent,childone

return list of tasks that are descended from a parent task
start principal=node(8598), workUnit=node(9446) 
MATCH principal-[:OWNS]->workUnit-[:DEPENDS_ON*]->m 
return m

return list of goals that are fulfiled from a child task
start principal= node(9399), workUnit=node(9402) 
MATCH principal-[:OWNS]->workUnit<-[:DEPENDS_ON*]-fulfillment 
return fulfillment


returns all work delegated to people
start principal=node(9399) 
MATCH principal-[:KNOWS]->p<-[:IS_DELEGATED_TO]-workUnit 
return distinct p,workUnit


start principal=node(8598) 
MATCH principal-[:OWNS]->workUnit->[:IS_VISIBLE_AT]->context 
return distinct workUnit, context

START principal=node(11027), workUnit=node(11425)
MATCH principal-[:OWNS]->workunit-[:IS_VISIBLE_AT]->context, principal-[:OWNS]->workunit-[:IS_THOUGHT_ABOUT_AT]->perspective, principal-[:OWNS]->workunit-[:IS_SCHEDULED_ON]->calendarEvent
WHERE workunit.Id ='5707f96e-165e-4518-91a7-af7442666e5b'
RETURN workunit AS WorkUnitNode, context AS ContextNode, perspective AS PerspectiveNode, calendarEvent AS CalendarEventNode


START principal=node(11027), workUnit=node(11425)
MATCH principal-[:OWNS]->workunit-[:IS_VISIBLE_AT]->context, principal-[:OWNS]->workunit-[:IS_THOUGHT_ABOUT_AT]->perspective, principal-[:OWNS]->workunit-[:IS_SCHEDULED_ON]->calendarEvent
WHERE workunit.Id ='5707f96e-165e-4518-91a7-af7442666e5b'
RETURN workunit AS WorkUnitNode, context AS ContextNode, perspective AS PerspectiveNode, calendarEvent AS CalendarEventNode


START principal=node(11027), workUnit=node(11425)
MATCH principal-[:OWNS]->workunit-[:IS_VISIBLE_AT]->context, principal-[:OWNS]->workunit-[:IS_SCHEDULED_ON]->calendarEvent
WHERE workunit.Id ='5707f96e-165e-4518-91a7-af7442666e5b'
RETURN  orkunit AS WorkUnitNode, context AS ContextNode, calendarEvent AS CalendarEventNode



START principal=node(11027), workUnit=node(11425)
MATCH 
principal-[:OWNS]->workunit-[:IS_VISIBLE_AT]->context, 
principal-[:OWNS]->workunit-[:IS_SCHEDULED_ON]->calendarEvent, 
principal-[:OWNS]->workunit-[:IS_THOUGHT_ABOUT_AT]->perspective
WHERE workunit.Id ='5707f96e-165e-4518-91a7-af7442666e5b'
RETURN  workunit AS WorkUnitNode, context AS ContextNode, calendarEvent AS CalendarEventNode

START principal=node(11431)
WHERE has(principal.UserName)
RETURN principal

START principal=node(*)
WHERE has(principal.UserName) and principal.UserName="fiver"
RETURN principal

Start principal=node(*)
Match principal-[r:OWNS]->workunit-[s:IS_DELEGATED_TO]->contact
WHERE has(contact.FullName) and contact.ContactPersonName=""
return s

Start principal=node(*)
Match principal-[r:KNOWS]->contact
WHERE has(contact.FullName) and contact.ContactPersonName=""
return  r, contact

Start principal=node(*)
Match principal-[:OWNS]->workUnit-[r:IS_SCHEDULED_ON]->calendarEvent
WHERE has(calendarEvent.start) 
RETURN principal, r, calendarEvent

Start principal=node(23002)
Match principal-[r:IS_SCHEDULED_ON]->calendarEvent
WHERE has(calendarEvent.start)
RETURN principal, r, calendarEvent

START principal=node(11431)
MATCH principal-[:OWNS]->workunit-[:IS_VISIBLE_AT]->context, principal-[:OWNS]->workunit-[:IS_THOUGHT_ABOUT_AT]->perspective
WHERE has(context.ContextName) and has(perspective.PerspectiveName)
RETURN workunit AS WorkUnitNode, context AS ContextNode, perspective AS PerspectiveNode

START principal=node(11796)
MATCH principal->a->b
RETURN Count(*)


START principal=node((11796))
MATCH principal-[r]->a-[s]->b
RETURN Count(*)

START principal=node(11795)
MATCH principal-[:OWNS]->workunit-[:IS_VISIBLE_AT*0..1]->context, principal-[:OWNS]->workunit-[:IS_THOUGHT_ABOUT_AT*0..1]->perspective
RETURN workunit AS WorkUnitNode, context AS ContextNode, perspective AS PerspectiveNode


START principal=node(11795)
MATCH principal-[:OWNS]->workunit-[:IS_VISIBLE_AT*0..1]->context, principal-[:OWNS]->workunit-[:IS_THOUGHT_ABOUT_AT*0..1]->perspective, workunit-[:IS_SCHEDULED_ON*0..1]->calendarEvent
RETURN workunit AS WorkUnitNode, context AS ContextNode, perspective AS PerspectiveNode, perspective AS CalendarEventNode

START principal=node({p0})
MATCH principal-[*..5]->end,
RETURN distinct end

start n = node(11978)
delete n

START principal=node(11795)
match root-[*..5]->end
return count(distinct end)



START principal=node(*)
match principal-[:OWNS]->workunit
WHERE has(principal.UserName) and principal.UserName= "laptop"
RETURN principal

START principal=node(*)
match principal-[:OWNS]->workunit-[r:IS_VISIBLE_AT]->context
WHERE has(principal.UserName) and principal.UserName= "laptop"
RETURN principal,workunit,r,context

START principal=node(*)
match principal-[:OWNS]->workunit-[r:IS_THOUGHT_ABOUT_AT]->perspective
WHERE has(principal.UserName) and principal.UserName= "laptop"
RETURN principal,workunit,r,perspective

START principal=node(*)
match principal-[:IS_LOCATED_AT]->context
WHERE has(principal.UserName) 
RETURN context

START principal=node(*)
MATCH principal-[:KNOWS]->b
RETURN principa, b


START principal=node(11795)
MATCH principal-[:KNOWS]->acquaintance
WHERE type(r) = KNOWS
DELETE r


START principal=node(11795)   
MATCH principal-[:KNOWS]->acquaintance   
WHERE type(r) = 'KNOWS'   
DELETE r


START principal=node(11795)
MATCH principal-[r:KNOWS]-acquaintance
WHERE type(r) = 'KNOWS'
return r


START principal=node(*)
MATCH workunit-[:IS_LOCATED_AT]->context,
RETURN workunit AS WorkUnitNode, context AS ContextNode,














